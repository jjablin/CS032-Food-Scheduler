
package mealplanner;

import java.text.DecimalFormat;


public class GoalsWindow extends javax.swing.JFrame {

    private WindowManager _windowManager;
    private DecimalFormat _format;

    /** Creates new form GoalsWindow */
    public GoalsWindow(WindowManager wm) {
        _windowManager = wm;
        _format = new DecimalFormat("#.#");
        initComponents();
        displayValues();
    }

    //displays the user's current goals in the appropriate text fields.
    private void displayValues()
    {
        double fatGrams = _windowManager.getUser().getFatGoal();
        fatGramsField.setText(Double.toString(fatGrams));
        fatCalsField.setText(Double.toString(fatGramsToCals(fatGrams)));

        double proteinGrams = _windowManager.getUser().getProteinGoal();
        proteinGramsField.setText(Double.toString(proteinGrams));
        proteinCalsField.setText(Double.toString(proteinGramsToCals(proteinGrams)));

        double carbGrams = _windowManager.getUser().getCarbGoal();
        carbGramsField.setText(Double.toString(carbGrams));
        carbCalsField.setText(Double.toString(carbGramsToCals(carbGrams)));

        double totalCals = _windowManager.getUser().getCalGoal();
        totalCalsField.setText(Double.toString(totalCals));
    }

    public double fatGramsToCals(double grams)
    {
        double calsPerGram = 9; //http://en.wikipedia.org/wiki/Food_energy
        double cals = grams * calsPerGram;
        String formatted = _format.format(cals);
        return Double.parseDouble(formatted);
    }

    public double proteinGramsToCals(double grams)
    {
        double calsPerGram = 4; //http://en.wikipedia.org/wiki/Food_energy
        double cals = grams * calsPerGram;
        String formatted = _format.format(cals);
        return Double.parseDouble(formatted);
    }

    public double carbGramsToCals(double grams)
    {
        double calsPerGram = 4; //http://en.wikipedia.org/wiki/Food_energy
        double cals = grams * calsPerGram;
        String formatted = _format.format(cals);
        return Double.parseDouble(formatted);
    }

    public double fatCalsToGrams(double cals)
    {
        double gramsPerCal = 1.0 /9;
        return cals * gramsPerCal;
    }

    public double proteinCalsToGrams(double cals)
    {
        double gramsPerCal = 1.0 /4;
        return cals * gramsPerCal;
    }

    public double carbCalsToGrams(double cals)
    {
        double gramsPerCal = 1.0 /4;
        return cals * gramsPerCal;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructionLabel = new javax.swing.JLabel();
        fatLabel = new javax.swing.JLabel();
        fatGramsField = new javax.swing.JTextField();
        gramLabel1 = new javax.swing.JLabel();
        proteinLabel = new javax.swing.JLabel();
        proteinGramsField = new javax.swing.JTextField();
        carbLabel = new javax.swing.JLabel();
        carbGramsField = new javax.swing.JTextField();
        gramLabel2 = new javax.swing.JLabel();
        gramLabel3 = new javax.swing.JLabel();
        fatCalsField = new javax.swing.JTextField();
        proteinCalsField = new javax.swing.JTextField();
        eq1 = new javax.swing.JLabel();
        eq2 = new javax.swing.JLabel();
        eq3 = new javax.swing.JLabel();
        carbCalsField = new javax.swing.JTextField();
        calLabel1 = new javax.swing.JLabel();
        calLabel2 = new javax.swing.JLabel();
        calLabel3 = new javax.swing.JLabel();
        totalCalsLabel = new javax.swing.JLabel();
        totalCalsField = new javax.swing.JTextField();
        toPlannerButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Meal Planner - Goals");

        instructionLabel.setText("Enter your dietary goals in grams or calories per day:");

        fatLabel.setText("Fat:");

        fatGramsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fatGramsFieldFocusLost(evt);
            }
        });

        gramLabel1.setText("grams");

        proteinLabel.setText("Protein:");

        proteinGramsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                proteinGramsFieldFocusLost(evt);
            }
        });

        carbLabel.setText("Carbohydrates:");

        carbGramsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                carbGramsFieldFocusLost(evt);
            }
        });

        gramLabel2.setText("grams");

        gramLabel3.setText("grams");

        fatCalsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fatCalsFieldFocusLost(evt);
            }
        });

        proteinCalsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                proteinCalsFieldFocusLost(evt);
            }
        });

        eq1.setText("=");

        eq2.setText("=");

        eq3.setText("=");

        carbCalsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                carbCalsFieldFocusLost(evt);
            }
        });

        calLabel1.setText("Calories");

        calLabel2.setText("Calories");

        calLabel3.setText("Calories");

        totalCalsLabel.setText("Total Calories:");

        totalCalsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                totalCalsFieldFocusLost(evt);
            }
        });

        toPlannerButton.setText("Return to Meal Planner");
        toPlannerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toPlannerButtonMouseClicked(evt);
            }
        });

        resetButton.setText("Recommended Values");
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(instructionLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(carbLabel)
                                    .addComponent(proteinLabel)
                                    .addComponent(fatLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(carbGramsField)
                                    .addComponent(proteinGramsField)
                                    .addComponent(fatGramsField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gramLabel1)
                                    .addComponent(gramLabel2)
                                    .addComponent(gramLabel3)))
                            .addComponent(totalCalsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eq2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proteinCalsField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eq1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fatCalsField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eq3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalCalsField, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                    .addComponent(carbCalsField))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calLabel3)
                            .addComponent(calLabel2)
                            .addComponent(calLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toPlannerButton)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructionLabel)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fatLabel)
                    .addComponent(gramLabel1)
                    .addComponent(fatGramsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eq1)
                    .addComponent(fatCalsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinLabel)
                    .addComponent(proteinGramsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gramLabel2)
                    .addComponent(eq2)
                    .addComponent(proteinCalsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carbLabel)
                    .addComponent(carbGramsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gramLabel3)
                    .addComponent(eq3)
                    .addComponent(carbCalsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalCalsLabel)
                    .addComponent(totalCalsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toPlannerButton)
                    .addComponent(resetButton))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void toPlannerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toPlannerButtonMouseClicked
        _windowManager.showPlannerMainWindow();
    }//GEN-LAST:event_toPlannerButtonMouseClicked

    //updates the fatCals field and total cals field to correspond to the value in the fat grams field
    //invalid inputs are changed to be 0, and the database is updated.
    private void fatGramsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fatGramsFieldFocusLost
        String gramsString = fatGramsField.getText();
        double grams;
        try{
            grams = Double.parseDouble(gramsString);
        }
        catch(NumberFormatException e){
            grams = 0; //assume a value of zero if the input can not be parsed to a double
            fatGramsField.setText("0");
        }
        if(grams < 0)
        {
            grams = 0;
            fatGramsField.setText("0");
        }
        double cals = fatGramsToCals(grams);
        fatCalsField.setText(_format.format(cals));
        updateTotalCals();

        //update the database
        String formatedGrams = _format.format(grams);
        _windowManager.getUser().setFatGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_fatGramsFieldFocusLost

    //updates the proteinCals field and total cals field to correspond to the value in the protein grams field
    //invalid inputs are changed to be 0, and the database is updated.
    private void proteinGramsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proteinGramsFieldFocusLost
        String gramsString = proteinGramsField.getText();
        double grams;
        try{
            grams = Double.parseDouble(gramsString);
        }
        catch(NumberFormatException e){
            grams = 0; //assume a value of zero if the input can not be parsed to a double
            proteinGramsField.setText("0");
        }
        if(grams < 0)
        {
            grams = 0;
            proteinGramsField.setText("0");
        }
        double cals = proteinGramsToCals(grams);
        String formatedCals = _format.format(cals);
        proteinCalsField.setText(formatedCals);
        updateTotalCals();

        //update database
        String formatedGrams = _format.format(grams);
        _windowManager.getUser().setProteinGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_proteinGramsFieldFocusLost

    //updates the carbCals field and total cals field to correspond to the value in the carb grams field
    //invalid inputs are changed to be 0, and the database is updated.
    private void carbGramsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_carbGramsFieldFocusLost
        String gramsString = carbGramsField.getText();
        double grams;
        try{
            grams = Double.parseDouble(gramsString);
        }
        catch(NumberFormatException e){
            grams = 0; //assume a value of zero if the input can not be parsed to a double
            carbGramsField.setText("0");
        }
        if(grams < 0)
        {
            grams = 0;
            carbGramsField.setText("0");
        }
        double cals = carbGramsToCals(grams);
        String formatedCals = _format.format(cals);
        carbCalsField.setText(formatedCals);
        updateTotalCals();

        //update the database
        String formatedGrams = _format.format(grams);
        _windowManager.getUser().setCarbGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_carbGramsFieldFocusLost

    //updates the fatGrams field and total cals field to correspond to the value in the fatCals field
    //invalid inputs are changed to be 0, and the database is updated.
    private void fatCalsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fatCalsFieldFocusLost
        double cals = getFatCals();
        double grams = fatCalsToGrams(cals);
        String formatedGrams = _format.format(grams);
        fatGramsField.setText(formatedGrams);
        updateTotalCals();

        //update the datadase
        _windowManager.getUser().setFatGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_fatCalsFieldFocusLost

    //updates the proteinGrams field and total cals field to correspond to the value in the proteinCals field
    //invalid inputs are changed to be 0, and the database is updated.
    private void proteinCalsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proteinCalsFieldFocusLost
        double cals = getProteinCals();
        double grams = proteinCalsToGrams(cals);
        String formatedGrams = _format.format(grams);
        proteinGramsField.setText(formatedGrams);
        updateTotalCals();

        //update database
        _windowManager.getUser().setProteinGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_proteinCalsFieldFocusLost

    //updates the carbGrams field and total cals field to correspond to the value in the carbCals field
    //invalid inputs are changed to be 0, and the database is updated.
    private void carbCalsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_carbCalsFieldFocusLost
        double cals = getCarbCals();
        double grams = carbCalsToGrams(cals);
        String formatedGrams = _format.format(grams);
        carbGramsField.setText(formatedGrams);
        updateTotalCals();

        //update the database
        _windowManager.getUser().setCarbGoal(Double.parseDouble(formatedGrams));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }//GEN-LAST:event_carbCalsFieldFocusLost

    //if the total calories does not equal the sum of the other 3 calorie boxes,
    //divides the total calories evenly between the other 3 boxes and updates 
    //the grams fields accordingly.
    //if the total calories can not be parsed, sets total calories to the sum of
    //the other 3 calorie boxes
    private void totalCalsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalCalsFieldFocusLost
        double totalCals = getTotalCals();

        double calorieSum = getFatCals() + getProteinCals() + getCarbCals();

        if(totalCals != calorieSum)
        {
            double oneThirdCals = totalCals / 3;
            String formated = _format.format(oneThirdCals);
            fatCalsField.setText(formated);
            fatCalsFieldFocusLost(null); //updates the grams field as well
            proteinCalsField.setText(formated);
            proteinCalsFieldFocusLost(null);
            carbCalsField.setText(formated);
            carbCalsFieldFocusLost(null);
        }
    }//GEN-LAST:event_totalCalsFieldFocusLost

    //sets the user's goals to the recommended values and updates the database and gui
    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        _windowManager.getUser().setNutritionGoalsToReccomended();
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
        displayValues();
    }//GEN-LAST:event_resetButtonMouseClicked

    //returns the double representation of the value of the text in fatCalsField
    //if it can not be parsed to a double or is a negative value, returns 0 and sets the text to 0
    private double getFatCals()
    {
        String fatCalsString = fatCalsField.getText();
        double fatCals;
        try{
            fatCals = Double.parseDouble(fatCalsString);
        } catch(NumberFormatException e){
            fatCals = 0;
            fatCalsField.setText("0");
        }
        if(fatCals < 0)
        {
            fatCals = 0;
            fatCalsField.setText("0");
        }
        String formatedCals = _format.format(fatCals);
        return Double.parseDouble(formatedCals);
    }

    //returns the double representation of the value of the text in proteinCalsField
    //if it can not be parsed to a double or is less than 0, returns 0
    private double getProteinCals()
    {
        String proteinCalsString = proteinCalsField.getText();
        double proteinCals;
        try{
            proteinCals = Double.parseDouble(proteinCalsString);
        } catch (NumberFormatException e){
            proteinCals = 0;
            proteinCalsField.setText("0");
        }
        if(proteinCals < 0)
        {
            proteinCals = 0;
            proteinCalsField.setText("0");
        }
        String formatedCals = _format.format(proteinCals);
        return Double.parseDouble(formatedCals);
    }

    //returns the double representation of the value of the text in carbCalsField
    //if it can not be parsed to a double or is a negative value, returns 0
    private double getCarbCals()
    {
        String carbCalsString = carbCalsField.getText();
        double carbCals;
        try{
            carbCals = Double.parseDouble(carbCalsString);
        } catch(NumberFormatException e){
            carbCals = 0;
            carbCalsField.setText("0");
        }
        if(carbCals < 0)
        {
            carbCals = 0;
            carbCalsField.setText("0");
        }
        String formatedCals = _format.format(carbCals);
        return Double.parseDouble(formatedCals);
    }

    private double getTotalCals()
    {
        String calsString = totalCalsField.getText();
        double cals;
        try{
            cals = Double.parseDouble(calsString);
        } catch(NumberFormatException e){
            cals = 0;
            totalCalsField.setText("0");
        }
        if(cals < 0)
        {
            cals = 0;
            totalCalsField.setText("0");
        }
        String formatedCals = _format.format(cals);
        return Double.parseDouble(formatedCals);
    }

    //updates the total Calories field with the total from the other 3 calorie fields
    private void updateTotalCals()
    {
        double totalCals = getFatCals() + getProteinCals() + getCarbCals();
        String formatedCals = _format.format(totalCals);
        totalCalsField.setText(formatedCals);

        //update the database
        _windowManager.getUser().setCalGoal(Double.parseDouble(formatedCals));
        _windowManager.getDatabase().updateUser(_windowManager.getUser());
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel calLabel1;
    private javax.swing.JLabel calLabel2;
    private javax.swing.JLabel calLabel3;
    private javax.swing.JTextField carbCalsField;
    private javax.swing.JTextField carbGramsField;
    private javax.swing.JLabel carbLabel;
    private javax.swing.JLabel eq1;
    private javax.swing.JLabel eq2;
    private javax.swing.JLabel eq3;
    private javax.swing.JTextField fatCalsField;
    private javax.swing.JTextField fatGramsField;
    private javax.swing.JLabel fatLabel;
    private javax.swing.JLabel gramLabel1;
    private javax.swing.JLabel gramLabel2;
    private javax.swing.JLabel gramLabel3;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JTextField proteinCalsField;
    private javax.swing.JTextField proteinGramsField;
    private javax.swing.JLabel proteinLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton toPlannerButton;
    private javax.swing.JTextField totalCalsField;
    private javax.swing.JLabel totalCalsLabel;
    // End of variables declaration//GEN-END:variables

}
